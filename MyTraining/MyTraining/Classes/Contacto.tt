<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".generated.cs" #>

// --------------------------------------------------------
// Auto-generated code.
// Please do not change this generated code.
// Every change made to the resulting code will be deleted
// after rebuilding project.
// New functionalities must be included in partial classes.
// --------------------------------------------------------

namespace MyTraining.Classes {
<#
GenerateClassesFromXML("./MyTraining/Classes/classes.xml");

void GenerateClassesFromXML(string xmlPath) {
	var xmlDoc = new XmlDocument();
	xmlDoc.Load(xmlPath);

	var classes = xmlDoc.SelectNodes("//class");

	foreach(XmlNode classNode in classes) {
		var className = classNode.Attributes["name"].Value;
		var complementClassName = (classNode.Attributes["complementName"]!= null ? classNode.Attributes["complementName"].Value : string.Empty);
		var inheritsFrom = (classNode.Attributes["inheritsFrom"] != null) ? classNode.Attributes["inheritsFrom"].Value : string.Empty;
#>
	public partial class <#= className #><#= complementClassName #>
<#
		if (!string.IsNullOrEmpty(inheritsFrom)) {
#>
		: <#= inheritsFrom #>
<#
		}
#>
	{
<#
		var properties = classNode.SelectNodes("properties/property");
		foreach (XmlNode propertyNode in properties) {
			var propertyName = propertyNode.Attributes["name"].Value;
			var propertyType = propertyNode.Attributes["type"].Value;
#>
		private <#= propertyType #> _<#= propertyName #>;
		public <#= propertyType #> <#= propertyName #> {
			get {
				return _<#= propertyName #>;
			}
		}
		public void Set<#= propertyName #>(<#= propertyType #> <#= propertyName.ToLower() #>) {
			_<#= propertyName #> = <#= propertyName.ToLower() #>;
		}

<#
		}
#>
		public <#= className #><#= complementClassName #>() {
		}
	}
<#
	}
}
#>
}